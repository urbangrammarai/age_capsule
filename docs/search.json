[
  {
    "objectID": "gpu_spatial_join.html",
    "href": "gpu_spatial_join.html",
    "title": "EPC Capsule",
    "section": "",
    "text": "We run this on the latest official RAPIDS container (on a NVIDIA GPU accelerated machine), which we can launch with:\ndocker run --gpus all --rm -it \\\n    -p 8889:8888 -p 8788:8787 -p 8786:8786 \\\n    -v /media/dani/DataStore/data/:/rapids/notebooks/data \\\n    -v ${PWD}:/rapids/notebooks/work \\\n    rapidsai/rapidsai:cuda11.4-runtime-ubuntu20.04-py3.9\nWith this setup, we can access the same work and data folders as in the previous notebook.\n\nimport geopandas\nimport cuspatial\nimport pandas\nfrom tools import sjoin_gpu\nfrom tqdm import tqdm\nfrom math import ceil\n\nuprn_p = '/rapids/notebooks/data/tmp/epc_uprn.pq'\nss_p = '/rapids/notebooks/data/tmp/sss.pq'\n\n\n\nBefore we run the spatial join on the whole dataset, and since cuspatial is a relatively new library compared to geopandas, we perform a check on a small sample to confirm the results from the spatial join are the same.\nWe will read into RAM the first 1,600 EPC properties (uprn) and joined them to the spatial signature polygons (ss):\n\n%%time\nuprn = geopandas.read_parquet(uprn_p).head(1600)\nss = geopandas.read_parquet(ss_p)\n\nCPU times: user 24.5 s, sys: 7.68 s, total: 32.2 s\nWall time: 27.8 s\n\n\nThen we move them to the GPU:\n\n%%time\nuprn_gpu = cuspatial.from_geopandas(uprn)\nss_gpu = cuspatial.from_geopandas(ss)\n\nCPU times: user 7.78 s, sys: 675 ms, total: 8.45 s\nWall time: 8.39 s\n\n\nAnd perform the GPU-backed spatial join:\n\n%time tst_gpu = sjoin_gpu(uprn_gpu, ss_gpu)\n\n/opt/conda/envs/rapids/lib/python3.9/site-packages/cuspatial/core/spatial/indexing.py:193: UserWarning: scale 5 is less than required minimum scale 9345.561538461538. Clamping to minimum scale\n  warnings.warn(\n/opt/conda/envs/rapids/lib/python3.9/site-packages/cuspatial/core/spatial/join.py:171: UserWarning: scale 5 is less than required minimum scale 9345.561538461538. Clamping to minimum scale\n  warnings.warn(\n\n\nCPU times: user 649 ms, sys: 40.1 ms, total: 689 ms\nWall time: 686 ms\n\n\nAnd the same with geopandas:\n\n%%time\ntst = geopandas.sjoin(uprn, ss, how='left')\n\nCPU times: user 1.78 s, sys: 757 µs, total: 1.78 s\nWall time: 1.78 s\n\n\nWe can see computation time is much shorter on the GPU (this gap actually grows notably when the number of points grows, to obtain at least a 20x performance boost). To compare the two results, we join them into a single table:\n\ncheck = tst.join(\n    tst_gpu.to_pandas().set_index('LMK_KEY'), \n    on='LMK_KEY', \n    rsuffix='_gpu'\n)\n\nAnd check that the unique identifier of each EPC property (id and id_gpu) are the same:\n\n(check['id'] != check['id_gpu']).sum()\n\n1\n\n\nThe only instance in this sample that differs actually doesn’t differ but it is a point that is not joined to any polygon and hence has NaN values:\n\ncheck[check.eval('id != id_gpu')]\n\n\n\n\n\n  \n    \n      \n      LMK_KEY\n      CONSTRUCTION_AGE_BAND\n      UPRN\n      geometry\n      index_right\n      id\n      code\n      type\n      point_index\n      UPRN_gpu\n      CONSTRUCTION_AGE_BAND_gpu\n      id_gpu\n      type_gpu\n    \n  \n  \n    \n      559\n      887304392732013022216585817278109\n      England and Wales: 2007 onwards\n      10090070569\n      POINT (452546.000 533673.000)\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\nWith this, we confirm we can use the GPU-backed spatial join, and proceed to deployment to the entire dataset.\n\n\n\nWe read in RAM the two tables without subsetting this time:\n\n%%time\nuprn = geopandas.read_parquet(uprn_p)\nss = geopandas.read_parquet(ss_p)\n\nCPU times: user 24.7 s, sys: 7.48 s, total: 32.1 s\nWall time: 28 s\n\n\nThen we move them to the GPU:\n\n%%time\nuprn_gpu = cuspatial.from_geopandas(uprn)\nss_gpu = cuspatial.from_geopandas(ss)\n\nCPU times: user 3min 46s, sys: 6.65 s, total: 3min 52s\nWall time: 3min 49s\n\n\nAnd we are ready to perform the GPU-backed spatial join. Because the GPU on which this is being run only has 8GB or memory, we need to chunk the computation. We will do this by joining chunk_size points at a time and storing the results back on RAM. Once finished, we save the resulting table to disk.\nWe can set this up with a simple for loop:\n\n%%time\nout = []\nchunk_size = 500000\nfor i in tqdm(range(ceil(len(uprn_gpu) / chunk_size))):\n    chunk = uprn_gpu.iloc[i*(chunk_size-1): i*(chunk_size-1)+chunk_size, :]\n    sjoined = sjoin_gpu(chunk, ss_gpu, scale=10000)\n    out.append(sjoined.to_pandas())\nout = pandas.concat(out)\nout.to_parquet('/rapids/notebooks/data/tmp/epc_uprn_ss.pq')\n\n  9%|▊         | 4/46 [01:16<13:06, 18.73s/it]\n\n\n\n! du -h /rapids/notebooks/data/tmp/epc_uprn*\n\n\n\n\nSince the method used to perform the spatial join (sjoin_gpu) was written for this project, it might be helpful to print here its documentation:\n\n\nYou can download the file with the function here.\n\nsjoin_gpu?\n\n\u001b[0;31mSignature:\u001b[0m\n\u001b[0msjoin_gpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0mpts_gdf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0mpoly_gdf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0mscale\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0mmax_depth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0mmax_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m125\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0mpts_cols\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'LMK_KEY'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'UPRN'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'CONSTRUCTION_AGE_BAND'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0mpoly_cols\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'id'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'type'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;31mDocstring:\u001b[0m\nSpatial Join on a GPU\n...\n\nAdapted from:\n\n> https://docs.rapids.ai/api/cuspatial/stable/user_guide/users.html#cuspatial.quadtree_point_in_polygon\n\nArguments\n---------\npts_gdf : geopandas.GeoDataFrame/cuspatial.GeoDataFrame\n          Table with points\npoly_gdf : geopandas.GeoDataFrame/cuspatial.GeoDataFrame\n           Table with polygons\nscale : int\n        [From `cuspatial` docs. Default=5] A scaling function that increases the size of the point \n        space from an origin defined by `{x_min, y_min}`. This can increase the likelihood of \n        generating well-separated quads.\n        \nmax_depth : int\n            [From `cuspatial` docs. Default=7] In order for a quadtree to index points effectively, \n            it must have a depth that is log-scaled with the size of the number of points. Each level \n            of the quad tree contains 4 quads. The number of available quads $q$\n            for indexing is then equal to $q = 4^d$ where $d$ is the max_depth parameter. With an input \n            size of 10m points and `max_depth` = 7, points will be most efficiently packed into the leaves\n            of the quad tree.\nmax_size : int\n           [From `cuspatial` docs. Default=125] Maximum number of points allowed in a node before it's \n           split into 4 leaf nodes. \npts_cols : list\n           [Optional. Default=['UPRN', 'CONSTRUCTION_AGE_BAND']] Column names in `pts_gdf` to be \n           joined in the output\npoly_cols : list\n            [Optional. Default=['id', 'type']] Column names in `poly_gdf` to be joined in the output \n\nReturns\n-------\nsjoined : cudf.DataFrame\n          Table with `pts_cols` and `poly_cols` spatially joined\n\u001b[0;31mFile:\u001b[0m      /rapids/notebooks/work/tools.py\n\u001b[0;31mType:\u001b[0m      function"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EPC Capsule",
    "section": "",
    "text": "References\n\nArribas-Bel, Daniel, and Martin Fleischmann. 2022. “Spatial Signatures - Understanding (Urban) Spaces Through Form and Function.” Habitat International 128: 102641. https://doi.org/https://doi.org/10.1016/j.habitatint.2022.102641.\n\n\nFleischmann, Martin, and Daniel Arribas-Bel. 2022. “Geographical Characterisation of British Urban Form and Function Using the Spatial Signatures Framework.” Scientific Data 9 (1): 1–15."
  },
  {
    "objectID": "data_acquisition.html",
    "href": "data_acquisition.html",
    "title": "EPC Capsule",
    "section": "",
    "text": "This document collates the three main datasets used int his capsule: the Energy Performance Certificates (EPC), the UPRN locations, and the Spatial Signature polygons. We first link (through a table join) building age, through EPC, with UPRN locations, and then we bring the Spatial Signatures. The two are subsequently joined on the GPU in a separate notebook. Each section details the origin of the data.\n\nimport pandas\nimport geopandas\nimport dask_geopandas\nfrom pyogrio import read_dataframe\nimport warnings # To turn disable some known ones below\n\nuprn_p = '/home/jovyan/data/uk_os_openuprn/osopenuprn_202210.gpkg'\nepc_p = '/home/jovyan/data/uk_epc_certificates/'\nss_p = '/home/jovyan/data/tmp/spatial_signatures_GB.gpkg'\n\nERROR 1: PROJ: proj_create_from_database: Open of /opt/conda/share/proj failed\n\n\nSome of the computations will be run in parallel through Dask, so we set up a client for a local cluster with 16 workers (as many as threads in the machine where this is run):\n\nimport dask.dataframe as ddf\nfrom dask.distributed import LocalCluster, Client\n\nwith warnings.catch_warnings():\n    warnings.filterwarnings(\"ignore\")\n    client = Client(LocalCluster(n_workers=16))\n\n\n\nThese need to be downloaded manually from the official website (https://epc.opendatacommunities.org/). Once unzipped, it is a collection of .csv files that can be processed efficiently with Dask. Here we specify the computation lazily:\n\ndtypes = {\n   'CONSTRUCTION_AGE_BAND': 'str',\n   'UPRN': 'str',\n   'LMK_KEY': 'str'\n}\ncerts_all = ddf.read_csv(\n    f'{epc_p}*/certificates.csv', \n    dtype=dtypes,\n    usecols=dtypes\n)\n\nAnd execute it on the Dask cluster, local in this case, to load them in RAM (NOTE: this will take a significant amount of RAM on your machine). Note that we drop rows with N/A values in either of the three columns as we need observations with the three valid.\n\n%%time\nwith warnings.catch_warnings():\n    warnings.filterwarnings(\"ignore\")\n    certs = certs_all.dropna().compute()\n\nCPU times: user 12.4 s, sys: 3.1 s, total: 15.5 s\nWall time: 38.6 s\n\n\n\n\n\nUPRN coordinates are unique identifiers for property in Britain. We source them from the Ordnance Survey’s Open UPRN product (https://www.ordnancesurvey.co.uk/business-government/products/open-uprn), which also needs to be downloaded manually. We access the GPKG format which contains the geometries created for each point already.\nTo consume them, we load them up in RAM (NOTE - this will take a significant amount of memory on your machine):\n\n\nThe approach using pyogrio seems to beat a multi-core implementation with dask-geopandas, possibly because the latter relies on geopandas.read_file, even though it spreads the computation it across cores. In case of interest, here’s the code:\nuprn = dask_geopandas.read_file(\n    uprn_p, npartitions=16\n).compute()\n\n%%time\nuprn = read_dataframe(uprn_p, columns=['UPRN', 'geometry'])\nuprn['UPRN'] = uprn['UPRN'].astype(str) \n\nCPU times: user 56.1 s, sys: 8.79 s, total: 1min 4s\nWall time: 1min 10s\n\n\n\n\n\nWith both tables ready in memory, we merge them so that we attach point geometries to all the EPC certificate points through their UPRNs.\n\n%%time\ndb = geopandas.GeoDataFrame(\n    certs.merge(\n        uprn, left_on='UPRN', right_on='UPRN', how='left'\n    ), crs=uprn.crs\n)\n\nCPU times: user 40.9 s, sys: 3.58 s, total: 44.4 s\nWall time: 43.4 s\n\n\nAfter the merge, we write the table to disk so it can be loaded later on for the spatial join:\n\ndb.to_parquet('/home/jovyan/data/tmp/epc_uprn.pq')\n\n/tmp/ipykernel_3312797/3783868997.py:1: UserWarning: this is an initial implementation of Parquet/Feather file support and associated metadata.  This is tracking version 0.1.0 of the metadata specification at https://github.com/geopandas/geo-arrow-spec\n\nThis metadata specification does not yet make stability promises.  We do not yet recommend using this in a production setting unless you are able to rewrite your Parquet/Feather files.\n\nTo further ignore this warning, you can do: \nimport warnings; warnings.filterwarnings('ignore', message='.*initial implementation of Parquet.*')\n  db.to_parquet('/home/jovyan/data/tmp/epc_uprn.pq')\n\n\n\n\n\nFor the Spatial Signature boundaries, we rely on the official open data product. This can be downloaded programmatically from its Figshare location. You can download it directly with:\n\n! rm -f $ss_p # Remove if exsisting\n! wget -O $ss_p https://figshare.com/ndownloader/files/30904861\n\n--2022-12-21 17:30:16--  https://figshare.com/ndownloader/files/30904861\nResolving figshare.com (figshare.com)... 54.194.88.49, 52.17.229.77, 2a05:d018:1f4:d003:376b:de5c:3a42:a610, ...\nConnecting to figshare.com (figshare.com)|54.194.88.49|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://s3-eu-west-1.amazonaws.com/pfigshare-u-files/30904861/spatial_signatures_GB.gpkg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIYCQYOYV5JSSROOA/20221221/eu-west-1/s3/aws4_request&X-Amz-Date=20221221T173017Z&X-Amz-Expires=10&X-Amz-SignedHeaders=host&X-Amz-Signature=6c7b771aaa9d3262e8c5d21388e81b74dd21b6d622d36a17bac818dc7fe6a71e [following]\n--2022-12-21 17:30:17--  https://s3-eu-west-1.amazonaws.com/pfigshare-u-files/30904861/spatial_signatures_GB.gpkg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIYCQYOYV5JSSROOA/20221221/eu-west-1/s3/aws4_request&X-Amz-Date=20221221T173017Z&X-Amz-Expires=10&X-Amz-SignedHeaders=host&X-Amz-Signature=6c7b771aaa9d3262e8c5d21388e81b74dd21b6d622d36a17bac818dc7fe6a71e\nResolving s3-eu-west-1.amazonaws.com (s3-eu-west-1.amazonaws.com)... 52.218.85.75, 52.218.100.203, 52.92.1.232, ...\nConnecting to s3-eu-west-1.amazonaws.com (s3-eu-west-1.amazonaws.com)|52.218.85.75|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 909824000 (868M) [application/octet-stream]\nSaving to: ‘/home/jovyan/data/tmp/spatial_signatures_GB.gpkg’\n\n/home/jovyan/data/t 100%[===================>] 867.68M  70.4MB/s    in 12s     \n\n2022-12-21 17:30:29 (72.6 MB/s) - ‘/home/jovyan/data/tmp/spatial_signatures_GB.gpkg’ saved [909824000/909824000]\n\n\n\n\n%%time\nss = read_dataframe(ss_p)\n\nCPU times: user 1.46 s, sys: 794 ms, total: 2.26 s\nWall time: 2.24 s\n\n\nThis is very detailed, which makes things much slower to run, so we simplify first:\n\n%%time\nsss = ss.simplify(10)\n\nCPU times: user 1min 17s, sys: 1.04 s, total: 1min 19s\nWall time: 1min 10s\n\n\nNow we can write to disk a Parquet table with the simplified geometries for consumption later in the GPU:\n\nss.assign(geometry=sss).to_parquet('/home/jovyan/data/tmp/sss.pq')\n\n/tmp/ipykernel_3312797/4276883947.py:1: UserWarning: this is an initial implementation of Parquet/Feather file support and associated metadata.  This is tracking version 0.1.0 of the metadata specification at https://github.com/geopandas/geo-arrow-spec\n\nThis metadata specification does not yet make stability promises.  We do not yet recommend using this in a production setting unless you are able to rewrite your Parquet/Feather files.\n\nTo further ignore this warning, you can do: \nimport warnings; warnings.filterwarnings('ignore', message='.*initial implementation of Parquet.*')\n  ss.assign(geometry=sss).to_parquet('/home/jovyan/data/tmp/sss.pq')"
  }
]